<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-04-14T09:56:09+00:00</updated><id>http://localhost:4000/</id><title type="html">可口不可乐</title><subtitle>Hunter's blogs</subtitle><author><name>胡宗涛</name></author><entry><title type="html">Mysql误删库表后数据恢复</title><link href="http://localhost:4000/2017/04/12/mysql%E8%AF%AF%E5%88%A0%E5%BA%93%E8%A1%A8%E5%90%8E%E6%81%A2%E5%A4%8D/" rel="alternate" type="text/html" title="Mysql误删库表后数据恢复" /><published>2017-04-12T00:00:00+00:00</published><updated>2017-04-12T00:00:00+00:00</updated><id>http://localhost:4000/2017/04/12/mysql%E8%AF%AF%E5%88%A0%E5%BA%93%E8%A1%A8%E5%90%8E%E6%81%A2%E5%A4%8D</id><content type="html" xml:base="http://localhost:4000/2017/04/12/mysql%E8%AF%AF%E5%88%A0%E5%BA%93%E8%A1%A8%E5%90%8E%E6%81%A2%E5%A4%8D/">&lt;p&gt;Mysql误删库表后数据恢复&lt;/p&gt;

&lt;h3 id=&quot;事故发生原因&quot;&gt;事故发生原因&lt;/h3&gt;
&lt;p&gt;今天用workbench想对测试库的表进行逆向工程导出数据模型，结果错点了“正向导入”一路next导致直接把测试库的所有表给干掉了，很难受！
Linux系统版本：Centos6.6
Mysql版本：5.6.25 Community&lt;/p&gt;

&lt;h3 id=&quot;分析&quot;&gt;分析&lt;/h3&gt;
&lt;p&gt;迅速把解决方法定位到“Mysql误删表后如何恢复”，如果日常有定时备份脚本当然再好不过，直接可以用上个时间点的sql恢复，但是我们的测试库没有备份，所以尝试用恢复log-bin操作日志的方式&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;查看测试服务器上的my.cnf配置
    &lt;div class=&quot;language-config highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;datadir&lt;/span&gt;=/&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;查看mysql存储目录&lt;/p&gt;
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@centos1 mysql]# &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/var/lib/mysql
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@centos1 mysql]# ls
auto.cnf     mysql-bin.000001  mysql-bin.000012  mysql-bin.000023  mysql-bin.000034  mysql-bin.000045    point_bank               rtmap_guangf           xsmm
beaconzone   mysql-bin.000002  mysql-bin.000013  mysql-bin.000024  mysql-bin.000035  mysql-bin.000046    promo                    rtmap_pay_v3           zhuawawa
doubleball   mysql-bin.000003  mysql-bin.000014  mysql-bin.000025  mysql-bin.000036  mysql-bin.000047    promo3                   rts_1@002e0@002e0      zhuawawa1
dragon_boat  mysql-bin.000004  mysql-bin.000015  mysql-bin.000026  mysql-bin.000037  mysql-bin.000048    promo3@002dfull          run_game
ibdata1      mysql-bin.000005  mysql-bin.000016  mysql-bin.000027  mysql-bin.000038  mysql-bin.000049    promo3_back20            settlement@002dsystem
ib_logfile0  mysql-bin.000006  mysql-bin.000017  mysql-bin.000028  mysql-bin.000039  mysql-bin.000050    promo3_report            shake_promo
ib_logfile1  mysql-bin.000007  mysql-bin.000018  mysql-bin.000029  mysql-bin.000040  mysql-bin.000051    promo_test               sys_core
ka_lightapp  mysql-bin.000008  mysql-bin.000019  mysql-bin.000030  mysql-bin.000041  mysql-bin.index     rtmap@002dcoupon         template_platform
mt           mysql-bin.000009  mysql-bin.000020  mysql-bin.000031  mysql-bin.000042  mysql.sock          rtmap_dsp_1@002e0@002e0  &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;mtp          mysql-bin.000010  mysql-bin.000021  mysql-bin.000032  mysql-bin.000043  ouya                rtmap_framework          vter
mysql        mysql-bin.000011  mysql-bin.000022  mysql-bin.000033  mysql-bin.000044  performance_schema  rtmap_game               wisdom_map
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@centos1 mysql]# ls
&lt;span class=&quot;c&quot;&gt;# 查看最近bin-log修改时间&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;确定哪些bin-log文件是和被删除库相关的
根据查看最近的bin-log文件的修改时间，确定了mysql-bin.000045 mysql-bin.000046 mysql-bin.000047 mysql-bin.000048，如果这个方法行不通那就只能是根据bin-log文件转换成sql文件后，用grep管道或者less进行匹配你想看的库或表
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysqlbinlog /var/lib/mysql/mysql-bin.000048 &amp;gt; /opt/backup/000048.sql
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;确定删除表的position
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;less 000048.sql
&lt;span class=&quot;c&quot;&gt;# shift+G定位到最后，然后利用J/K键进行定位，最终定位结果是end_log_pos = 870195071 和 时间点 2017-04-12 10:15:52&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# at 870194939&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#170412 10:15:52 server id 1  end_log_pos 870195071 CRC32 0x4004aa5a    Query   thread_id=9851  exec_time=0     error_code=0&lt;/span&gt;
SET &lt;span class=&quot;nv&quot;&gt;TIMESTAMP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1491963352/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;!&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/;
SET @@session.foreign_key_checks&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0, @@session.unique_checks&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;!&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/;
SET @@session.sql_mode&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1608515584/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;!&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/;
/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;!&lt;span class=&quot;se&quot;&gt;\C&lt;/span&gt; utf8 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;//&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;!&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/;
SET @@session.character_set_client&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33,@@session.collation_connection&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33,@@session.collation_server&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;45/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;!&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/;
ALTER SCHEMA &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;rts_1.0.0&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;  DEFAULT COLLATE utf8mb4_general_ci
/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;!&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/;
&lt;span class=&quot;c&quot;&gt;# at 870195071&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#170412 10:15:52 server id 1  end_log_pos 870195220 CRC32 0x7e25daa0    Query   thread_id=9851  exec_time=0     error_code=0&lt;/span&gt;
use &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;rts_1.0.0&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;!&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/;
SET &lt;span class=&quot;nv&quot;&gt;TIMESTAMP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1491963352/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;!&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/;
DROP TABLE IF EXISTS &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;t_rts_enterprise&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; /&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; generated by server &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/
/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;!&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;注意：end_log_pos = 870195071 和 时间点 2017-04-12 10:15:52 相当重要，后续需要用它来做恢复点&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;利用bin-log开始恢复或者mysqlbinlog转换成sql恢复
```shell
[root@centos1 backup]# mysqlbinlog –help&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;按时间点恢复&quot;&gt;按时间点恢复&lt;/h1&gt;
&lt;p&gt;mysqlbinlog -d rts_1.0.0 –stop-datetime=”2017-04-12 10:15:52” mysql-bin.000045 mysql-bin.000046 mysql-bin.000047 mysql-bin.000048 | mysql -uroot-p&lt;/p&gt;

&lt;h1 id=&quot;按position恢复&quot;&gt;按position恢复&lt;/h1&gt;
&lt;p&gt;mysqlbinlog -d rts_1.0.0 –end-position=”870195071” mysql-bin.000045 mysql-bin.000046 mysql-bin.000047 mysql-bin.000048 | mysql -uroot-p&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
```shell
# 导出sql
mysqlbinlog -d rts_1.0.0 --stop-datetime=&quot;2017-04-12 10:15:52&quot; mysql-bin.000045 mysql-bin.000046 mysql-bin.000047 mysql-bin.000048 &amp;gt; /opt/backup/backup0412.sql
# 恢复sql
mysql -u root -p &amp;lt; /opt/backup/backup0412.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;恢复期间遇到的问题&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;5.1 mysqlbinlog命令执行失败,检查/etc/my.cnf [client] 下
注释default-character-set=utf8
5.2 mysqlbinlog在对function恢复时，发生错误中断了恢复操作，需要在/etc/my.cnf里的[mysqld]下加入
log_bin_trust_function_creators = 1&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;每次操作数据库表需要慎重，杜绝事故发生，建立不同权限的用户，规范使用用户名&lt;/li&gt;
  &lt;li&gt;做好日常备份
```shell
    &lt;h1 id=&quot;autobackupmysqlsh&quot;&gt;autoBackupMysql.sh&lt;/h1&gt;
    &lt;p&gt;#!/bin/bash
backup_dir=/opt/backup/mysql/
database=–all-databases
dbStruct=all-stuct
dbData=all-data
DATE=&lt;code class=&quot;highlighter-rouge&quot;&gt;date +%Y%m%d%H%m%s&lt;/code&gt;
dumpStructFile=$backup_dir$dbStruct-$DATE.sql
dumpDataFile=$backup_dir$dbData-$DATE.sql&lt;/p&gt;
    &lt;h1 id=&quot;backup-table-struct&quot;&gt;backup table struct&lt;/h1&gt;
    &lt;p&gt;/usr/bin/mysqldump -uroot -proot –default-character-set=utf8 –opt -d $database &amp;gt; $dumpStructFile&lt;/p&gt;
    &lt;h1 id=&quot;backup-table-data&quot;&gt;backup table data&lt;/h1&gt;
    &lt;p&gt;/usr/bin/mysqldump -uroot -proot –default-character-set=utf8 -t $database &amp;gt; $dumpDataFile&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;exit&quot;&gt;exit&lt;/h1&gt;
&lt;p&gt;chmod +x autoBackupMysql.sh&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;然后加入crontab启动计划里
```shell
crontab -e
# 分　时　日　月　周
0 0 * * * /root/shell/autoBackupMysql.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160804170302727&quot; alt=&quot;crontab格式说明&quot; /&gt;&lt;/p&gt;</content><author><name>胡宗涛</name></author><summary type="html">Mysql误删库表后数据恢复</summary></entry><entry><title type="html">系统资源监控命令(uptime|mpstat|dmese|pidstat…)</title><link href="http://localhost:4000/2017/04/12/%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E5%91%BD%E4%BB%A4/" rel="alternate" type="text/html" title="系统资源监控命令(uptime|mpstat|dmese|pidstat...)" /><published>2017-04-12T00:00:00+00:00</published><updated>2017-04-12T00:00:00+00:00</updated><id>http://localhost:4000/2017/04/12/%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E5%91%BD%E4%BB%A4</id><content type="html" xml:base="http://localhost:4000/2017/04/12/%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7%E5%91%BD%E4%BB%A4/">&lt;p&gt;各个系统资源监控命令&lt;/p&gt;

&lt;p&gt;uptime
15:41:00 up 182 days, 22:31,  1 user,  load average: 0.00, 0.00, 0.00&lt;/p&gt;

&lt;p&gt;这个命令显示了要运行的任务（进程）数，通过它能够快速了解系统的平均负载。&lt;/p&gt;

&lt;p&gt;mpstat -P ALL 1&lt;/p&gt;

&lt;p&gt;Linux 2.6.32-431.23.3.el6.x86&lt;em&gt;64 (iZ25sienu61Z) 01/20/2016 _x86_64&lt;/em&gt;	(2 CPU)&lt;/p&gt;

&lt;p&gt;03:41:16 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest   %idle
03:41:17 PM  all    2.01    0.00    0.00    0.00    0.00    0.00    0.00    0.00   97.99
03:41:17 PM    0    3.06    0.00    0.00    0.00    0.00    0.00    0.00    0.00   96.94
03:41:17 PM    1    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
这个命令显示每个CPU的时间使用百分比，你可以用它来检查CPU是否存在负载不均衡。单个过于忙碌的CPU可能意味着整个应用只有单个线程在工作。&lt;/p&gt;

&lt;p&gt;dmesg | tail
TCP: time wait bucket table overflow
TCP: time wait bucket table overflow
TCP: time wait bucket table overflow
TCP: time wait bucket table overflow
TCP: time wait bucket table overflow
TCP: time wait bucket table overflow
TCP: time wait bucket table overflow
TCP: time wait bucket table overflow
TCP: time wait bucket table overflow
TCP: time wait bucket table overflow
这个命令显示了最新的10个系统信息，如果有的话。注意会导致性能问题的错误信息。&lt;/p&gt;

&lt;p&gt;procs ———–memory———- —swap– —–io—- –system– —–cpu—–
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 0  0      0 460656 157692 2125436    0    0     0     3    1    1  1  0 98  0  0
 0  0      0 460648 157692 2125436    0    0     0     0  299  368  0  0 100  0  0
 0  0      0 460648 157692 2125436    0    0     0    68  549  531  3  0 97  0  0
 0  0      0 460648 157692 2125440    0    0     0    36  781  465  2  1 98  0  0
r：等待CPU的进程数。该指标能更好地判定CPU是否饱和，因为它不包括I/O。简单地说，r值高于CPU数时就意味着饱和。
free：空闲的内存千字节数。如果你数不清有多少位，就说明系统内存是充足的。接下来要讲到的第7个命令，free -m，能够更清楚地说明空闲内存的状态。
si，so：Swap-ins和Swap-outs。如果它们不为零，意味着内存已经不足，开始动用交换空间的存粮了。
us，sy，id，wa，st：它们是所有CPU的使用百分比。它们分别表示user time，system time（处于内核态的时间），idle，wait I/O和steal time（被其它租户，或者是租户自己的Xen隔离设备驱动域（isolated driver domain），所占用的时间）&lt;/p&gt;

&lt;p&gt;free -m
                    total       used       free     shared    buffers     cached
Mem:          3829       3380        449          0        153       2076
-/+ buffers/cache:       1150       2679
Swap:            0          0          0&lt;/p&gt;

&lt;p&gt;buffers：用于块设备I/O的缓冲区缓存
cached：用于文件系统的页缓存&lt;/p&gt;

&lt;p&gt;pidstat 1
Linux 2.6.32-431.23.3.el6.x86&lt;em&gt;64 (iZ25sienu61Z) 01/20/2016 _x86_64&lt;/em&gt;	(2 CPU)&lt;/p&gt;

&lt;p&gt;03:47:33 PM       PID    %usr %system  %guest    %CPU   CPU  Command
03:47:34 PM      8566    2.00    1.00    0.00    3.00     0  java
03:47:34 PM     16730    1.00    0.00    0.00    1.00     0  AliHids&lt;/p&gt;

&lt;p&gt;pidstat看上去就像top，不过top的输出会覆盖掉之前的输出，而pidstat的输出则添加在之前的输出的后面。这有利于观察数据随时间的变动情况，也便于把你看到的内容复制粘贴到调查报告中。&lt;/p&gt;

&lt;p&gt;iostat -xz 1
Linux 2.6.32-431.23.3.el6.x86&lt;em&gt;64 (iZ25sienu61Z) 01/20/2016 _x86_64&lt;/em&gt;	(2 CPU)&lt;/p&gt;

&lt;p&gt;avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           1.34    0.00    0.22    0.03    0.00   98.41&lt;/p&gt;

&lt;p&gt;Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util
xvda              0.00     0.25    0.04    1.24     1.87    11.93    10.80     0.01    4.57   0.69   0.09&lt;/p&gt;

&lt;p&gt;r/s，w/s，rkB/s，wkB/s：分别表示每秒设备读次数，写次数，读的KB数，写的KB数。它们描述了磁盘的工作负载。也许性能问题就是由过高的负载所造成的。
await：I/O平均时间，以毫秒作单位。它是应用中I/O处理所实际消耗的时间，因为其中既包括排队用时也包括处理用时。如果它比预期的大，就意味着设备饱和了，或者设备出了问题。
avgqu-sz：分配给设备的平均请求数。大于1表示设备已经饱和了。（不过有些设备可以并行处理请求，比如由多个磁盘组成的虚拟设备）
%util：设备使用率。这个值显示了设备每秒内工作时间的百分比，一般都处于高位。低于60%通常是低性能的表现（也可以从await中看出），不过这个得看设备的类型。接近100%通常意味着饱和。&lt;/p&gt;

&lt;p&gt;sar -n DEV 1
Linux 2.6.32-431.23.3.el6.x86&lt;em&gt;64 (iZ25sienu61Z) 01/20/2016 _x86_64&lt;/em&gt;	(2 CPU)&lt;/p&gt;

&lt;p&gt;03:56:01 PM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s
03:56:02 PM        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00
03:56:02 PM      eth0     96.00     19.00     12.79      1.46      0.00      0.00      0.00
03:56:02 PM      eth1     68.00     56.00      4.03      6.58      0.00      0.00      0.00&lt;/p&gt;

&lt;p&gt;这个命令可以用于检查网络流量的工作负载：rxkB/s和txkB/s，以及它是否达到限额了。&lt;/p&gt;

&lt;p&gt;上面的例子中，eth0接收的流量达到22Mbytes/s，也即176Mbits/sec（限额是1Gbit/sec）&lt;/p&gt;

&lt;p&gt;sar -n TCP,ETCP 1&lt;/p&gt;

&lt;p&gt;Linux 2.6.32-431.23.3.el6.x86&lt;em&gt;64 (iZ25sienu61Z) 01/20/2016 _x86_64&lt;/em&gt;	(2 CPU)&lt;/p&gt;

&lt;p&gt;04:00:50 PM  active/s passive/s    iseg/s    oseg/s
04:00:51 PM      0.00      7.00     47.00     44.00&lt;/p&gt;

&lt;p&gt;04:00:50 PM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s
04:00:51 PM      0.00      4.00      0.00      0.00      0.00&lt;/p&gt;

&lt;p&gt;04:00:51 PM  active/s passive/s    iseg/s    oseg/s
04:00:52 PM      1.01      5.05     94.95    113.13&lt;/p&gt;

&lt;p&gt;04:00:51 PM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s
04:00:52 PM      0.00      0.00      0.00      0.00      0.00
这个命令显示一些关键TCP指标的汇总。其中包括：
active/s：本地每秒创建的TCP连接数（比如concept()创建的）
passive/s：远程每秒创建的TCP连接数（比如accept()创建的）
retrans/s：每秒TCP重传次数&lt;/p&gt;

&lt;p&gt;主动连接数（active）和被动连接数（passive）通常可以用来粗略地描述系统负载。可以认为主动连接是对外的，而被动连接是对内的，虽然严格来说不完全是这个样子。（比如，一个从localhost到localhost的连接）
重传是网络或系统问题的一个信号；它可能是不可靠的网络（比如公网）所造成的，也有可能是服务器已经过载并开始丢包。在上面的例子中，每秒只创建一个新的TCP连接。&lt;/p&gt;</content><author><name>胡宗涛</name></author><summary type="html">各个系统资源监控命令</summary></entry><entry><title type="html">CentOS-6.x 安装Supervisor并开机启动</title><link href="http://localhost:4000/2017/04/11/Centos6.x%E5%AE%89%E8%A3%85supervisor%E5%B9%B6%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/" rel="alternate" type="text/html" title="CentOS-6.x 安装Supervisor并开机启动" /><published>2017-04-11T00:00:00+00:00</published><updated>2017-04-11T00:00:00+00:00</updated><id>http://localhost:4000/2017/04/11/Centos6.x%E5%AE%89%E8%A3%85supervisor%E5%B9%B6%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8</id><content type="html" xml:base="http://localhost:4000/2017/04/11/Centos6.x%E5%AE%89%E8%A3%85supervisor%E5%B9%B6%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/">&lt;h2 id=&quot;supervisor安装&quot;&gt;supervisor安装&lt;/h2&gt;
&lt;h3 id=&quot;方法一&quot;&gt;方法一&lt;/h3&gt;
&lt;p&gt;python -V
2.6.6
yum install epel* python python-pip -y
easy_install supervisor
echo_supervisord_conf &amp;gt; /etc/supervisord.conf&lt;/p&gt;

&lt;h3 id=&quot;方法二&quot;&gt;方法二&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget --no-check-certificate https://bootstrap.pypa.io/get-pip.py
python get-pip.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;配置和常用命令&quot;&gt;配置和常用命令&lt;/h2&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 声明配置文件&lt;/span&gt;
supervisord -c /etc/supervisord.conf
&lt;span class=&quot;c&quot;&gt;# 编辑&lt;/span&gt;
vim supervisor.conf
&lt;span class=&quot;c&quot;&gt;# 指定自定义配置统一目录&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [include]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# files = /etc/supervisor_config/*.ini&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 去掉注释“#” 并指定自定义脚本目录&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 添加一个脚本&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;program:zookeeper]
&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/soft/zookeeper-3.4.9/bin/zkServer.sh start-foreground
&lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root
&lt;span class=&quot;nv&quot;&gt;autostart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;autorestart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;startsecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3

&lt;span class=&quot;c&quot;&gt;# 启动zookeeper服务&lt;/span&gt;
supervisorctl &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;start|stop|restart] zookeeper
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意事项：
保持supervisord.conf的默认配置不要做任何修改
有错误时查看
tailf /tmp/supervisord.log&lt;/p&gt;

&lt;h2 id=&quot;可能遇到的问题&quot;&gt;可能遇到的问题&lt;/h2&gt;
&lt;p&gt;新增tomcat的守护脚本后：
exited: tomcat (exit status 0; not expected)
exited: tomcat (exit status 127; not expected)   &lt;br /&gt;
都是和command执行命令错误有关系！
比如tomcat的启动方式为：catalina.sh run 否则报上述第一种错误
也不要用startup.sh的方式启动，否则报第二种错误&lt;/p&gt;

&lt;h2 id=&quot;开机自启脚本&quot;&gt;开机自启脚本&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://serverfault.com/questions/96499/how-to-automatically-start-supervisord-on-linux-ubuntu&quot;&gt;how-to-automatic-start-supervsord&lt;/a&gt;
/etc/rc.d/init.d/supervisord&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# /etc/rc.d/init.d/supervisord&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Supervisor is a client/server system that&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# allows its users to monitor and control a&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# number of processes on UNIX-like operating&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# systems.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# chkconfig: - 64 36&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# description: Supervisor Server&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# processname: supervisord&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Source init functions&lt;/span&gt;
. /etc/rc.d/init.d/functions

&lt;span class=&quot;nv&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;supervisord&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;exec_prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;prog_bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;exec_prefix&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/bin/supervisord&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PIDFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/run/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.pid&quot;&lt;/span&gt;

start&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;$&quot;Starting &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &quot;&lt;/span&gt;
        daemon &lt;span class=&quot;nv&quot;&gt;$prog_bin&lt;/span&gt; --pidfile &lt;span class=&quot;nv&quot;&gt;$PIDFILE&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f &lt;span class=&quot;nv&quot;&gt;$PIDFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; success &lt;span class=&quot;s2&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; startup&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; failure &lt;span class=&quot;s2&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; startup&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

stop&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;$&quot;Shutting down &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f &lt;span class=&quot;nv&quot;&gt;$PIDFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; killproc &lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; success &lt;span class=&quot;s2&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; shutdown&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
  &lt;/span&gt;start&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    start
  &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  stop&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    stop
  &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  status&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        status &lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  restart&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    stop
    start
  &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; {start|stop|restart|status}&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;关于开机自启命令&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chkconfig --add supervisord
chkconfig supervisord --level 345 on
chmod +x /etc/init.d/supervisord
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>胡宗涛</name></author><summary type="html">supervisor安装 方法一 python -V 2.6.6 yum install epel* python python-pip -y easy_install supervisor echo_supervisord_conf &amp;gt; /etc/supervisord.conf</summary></entry><entry><title type="html">搭建自己的博客</title><link href="http://localhost:4000/2017/04/10/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/" rel="alternate" type="text/html" title="搭建自己的博客" /><published>2017-04-10T00:00:00+00:00</published><updated>2017-04-10T00:00:00+00:00</updated><id>http://localhost:4000/2017/04/10/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2</id><content type="html" xml:base="http://localhost:4000/2017/04/10/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/">&lt;p&gt;搭建自己的博客&lt;/p&gt;

&lt;h2 id=&quot;mac环境&quot;&gt;MAC环境&lt;/h2&gt;
&lt;p&gt;Mac系统自带gem,又称“RubyGems”，这是Ruby文件组织包管理工具，类似于NodeJs的NPM或者Mac下的Homebrew&lt;/p&gt;
&lt;h2 id=&quot;jekyll基于ruby&quot;&gt;Jekyll（基于Ruby）&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;安装&lt;/li&gt;
  &lt;li&gt;用jekyll生成博客目录
```Shell
gem install jekyll bundle
Downloads pwd
/Users/Muarine/Downloads
➜  Downloads jekyll new Muarine_blog
Running bundle install in /Users/Muarine/Downloads/Muarine_blog…
  Bundler: The dependency tzinfo-data (&amp;gt;= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing for ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, run &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java&lt;/code&gt;.
  Bundler: Fetching gem metadata from https://rubygems.org/………..
  Bundler: Fetching version metadata from https://rubygems.org/..
  Bundler: Fetching dependency metadata from https://rubygems.org/.
  Bundler: Resolving dependencies…
  Bundler: Rubygems 2.0.14.1 is not threadsafe, so your gems will be installed one at a time. Upgrade to Rubygems 2.1.0 or higher to enable parallel gem installation.
  Bundler: Using public_suffix 2.0.5
  Bundler: Using colorator 1.1.0
  Bundler: Using ffi 1.9.18
  Bundler: Using forwardable-extended 2.6.0
  Bundler: Using sass 3.4.23
  Bundler: Using rb-fsevent 0.9.8
  Bundler: Using kramdown 1.13.2
  Bundler: Using liquid 3.0.6
  Bundler: Using mercenary 0.3.6
  Bundler: Using rouge 1.11.1
  Bundler: Using safe_yaml 1.0.4
  Bundler: Using bundler 1.14.6
  Bundler: Using addressable 2.5.1
  Bundler: Using rb-inotify 0.9.8
  Bundler: Using pathutil 0.14.0
  Bundler: Using jekyll-sass-converter 1.5.0
  Bundler: Using listen 3.0.8
  Bundler: Using jekyll-watch 1.5.0
  Bundler: Using jekyll 3.4.3
  Bundler: Using jekyll-feed 0.9.2
  Bundler: Using minima 2.1.0
  Bundler: Bundle complete! 4 Gemfile dependencies, 21 gems now installed.
  Bundler: Use &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle show [gemname]&lt;/code&gt; to see where a bundled gem is installed.
New jekyll site installed in /Users/Muarine/Downloads/Muarine_blog.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;➜  Downloads cd Muarine_blog
➜  Muarine_blog ls
Gemfile      Gemfile.lock _config.yml  _posts       about.md     index.md
➜  Muarine_blog tree
.
├── Gemfile
├── Gemfile.lock
├── _config.yml
├── _posts
│   └── 2017-04-10-welcome-to-jekyll.markdown
├── about.md
└── index.md&lt;/p&gt;

&lt;p&gt;1 directory, 6 files&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;可参考官网教程
[jekyllrb英文](http://jekyllrb.com/docs/quickstart/)
[jekyll中文](http://jekyllcn.com/docs/github-pages/)

## 淘一个自己喜欢的主题
在github上就选用[张志豪的个人博客](https://izhangzhihao.github.io/)的主题
然后clone到本地，直接利用如下命令
```Shell
jekyll build
jekyll serve --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在build时发现出现了github-pages主题未找到的错误,于是google后发现还需要安装插件,然后在&lt;a href=&quot;https://jekyllrb.com/docs/github-pages/&quot;&gt;jekyll github-pages&lt;/a&gt;中发现github现发布jekyll的版本&lt;a href=&quot;https://pages.github.com/versions.json&quot;&gt;jekyll version&lt;/a&gt;，可查找github-pages，目前版本是“134”&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Shell&quot;&gt;gem 'github-pages', 134
# 然后重复上一步的操作
jekyll build
jekyll serve --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;补充&lt;/strong&gt;
或者在build之前，通过bundle update，加载Gemfile安装也是可以的&lt;/p&gt;

&lt;h2 id=&quot;开始写自己的博客吧&quot;&gt;开始写自己的博客吧&lt;/h2&gt;
&lt;p&gt;具体可参考&lt;a href=&quot;https://github.com/muarine/muarine.github.io&quot;&gt;README&lt;/a&gt;的指导&lt;/p&gt;

&lt;h2 id=&quot;构建自己的githubio&quot;&gt;构建自己的github.io&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://help.github.com/categories/github-pages-basics/&quot;&gt;Github官方帮助文档&lt;/a&gt;
&lt;a href=&quot;http://blog.csdn.net/renfufei/article/details/37725057/&quot;&gt;中文帮助文档&lt;/a&gt;&lt;/p&gt;</content><author><name>胡宗涛</name></author><summary type="html">搭建自己的博客</summary></entry><entry><title type="html">SpringMVC初始化过程</title><link href="http://localhost:4000/2017/04/03/SpringMVC%E5%90%AF%E5%8A%A8%E5%88%9D%E5%A7%8B%E5%8C%96/" rel="alternate" type="text/html" title="SpringMVC初始化过程" /><published>2017-04-03T00:00:00+00:00</published><updated>2017-04-03T00:00:00+00:00</updated><id>http://localhost:4000/2017/04/03/SpringMVC%E5%90%AF%E5%8A%A8%E5%88%9D%E5%A7%8B%E5%8C%96</id><content type="html" xml:base="http://localhost:4000/2017/04/03/SpringMVC%E5%90%AF%E5%8A%A8%E5%88%9D%E5%A7%8B%E5%8C%96/">&lt;p&gt;##掌握SpringMVC启动过程&lt;/p&gt;

&lt;p&gt;SpringMVC中web.xml配置&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;listener&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;listener-class&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener-class&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中ContextLoaderListener作为初始化入口文件，核心方法如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContextLoaderListener&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContextLoader&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletContextListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/**

	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ContextLoaderListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/**
	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ContextLoaderListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/**
	初始化根context
	 */&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contextInitialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletContextEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;initWebApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/**
	销毁context
	 */&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contextDestroyed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletContextEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;closeWebApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ContextCleanupListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cleanupAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##参考资料##&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/RunForLove/p/5688731.html&quot;&gt;SpringMVC启动过程详解&lt;/a&gt;&lt;/p&gt;</content><author><name>胡宗涛</name></author><summary type="html">##掌握SpringMVC启动过程</summary></entry><entry><title type="html">maven基础知识</title><link href="http://localhost:4000/2017/04/02/maven/" rel="alternate" type="text/html" title="maven基础知识" /><published>2017-04-02T00:00:00+00:00</published><updated>2017-04-02T00:00:00+00:00</updated><id>http://localhost:4000/2017/04/02/maven</id><content type="html" xml:base="http://localhost:4000/2017/04/02/maven/">&lt;h2 id=&quot;maven相关基础&quot;&gt;Maven相关基础&lt;/h2&gt;

&lt;h3 id=&quot;maven自带的插件都是以maven开头&quot;&gt;maven自带的插件都是以maven开头&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;自带的插件名&lt;/th&gt;
      &lt;th&gt;应用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;maven-antrun-plugin&lt;/td&gt;
      &lt;td&gt;配置以Ant的方式编写Target， 然后交给该插件的run目标去执行。在一些由Ant往Maven迁移的项目中，该插件尤其有用。此外当你发现需要编写一些自定义程度很高的任务，同时又觉 得Maven不够灵活时，也可以以Ant的方式实现&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;maven-assembly-plugin&lt;/td&gt;
      &lt;td&gt;制作项目分发包，该分发包可能包含了项目的可执行文件、源代码、readme、平台脚本等。 支持各种主流的格式如zip、tar.gz、jar和war等， 使用一个名为assembly.xml的元数据文件来表述打包&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;maven-checkstyle-plugin&lt;/td&gt;
      &lt;td&gt;检查代码风格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;maven-compiler-plugin&lt;/td&gt;
      &lt;td&gt;编译源文件，可指定JDK版本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;maven-dependency-plugin&lt;/td&gt;
      &lt;td&gt;帮助分析依赖jar， dependency:list能够列出项目最终解析到的依赖列表，dependency:tree能进一步的描绘项目依赖树， dependency:analyze可以告诉你项目依赖潜在的问题，如： 有直接使用到的却未声明的依赖，该目标就会发出警告&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;maven-enforcer-plugin&lt;/td&gt;
      &lt;td&gt;maven-enforcer- plugin能够帮助你避免之类问题，它允许你创建一系列规则强制大家遵守，包括设定Java版本、设定Maven版本、禁止某些依赖、禁止 SNAPSHOT依赖&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;maven-help-plugin&lt;/td&gt;
      &lt;td&gt;help:system可以打印所有可用的环境变量和Java系统属性， help:effective-pom 打印项目的有效POM  help:effective-settings 打印有效settings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;maven-resources-plugin&lt;/td&gt;
      &lt;td&gt;处理资源文件， 资源文件过滤&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;maven-surefire-plugin&lt;/td&gt;
      &lt;td&gt;跳过测试、排除某些 测试类、或者使用一些TestNG&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>胡宗涛</name></author><summary type="html">Maven相关基础</summary></entry><entry><title type="html">Restful-API规约</title><link href="http://localhost:4000/2017/04/01/restful-api/" rel="alternate" type="text/html" title="Restful-API规约" /><published>2017-04-01T00:00:00+00:00</published><updated>2017-04-01T00:00:00+00:00</updated><id>http://localhost:4000/2017/04/01/restful-api</id><content type="html" xml:base="http://localhost:4000/2017/04/01/restful-api/">&lt;h2 id=&quot;restful-api-规约&quot;&gt;Restful API 规约&lt;/h2&gt;

&lt;h3 id=&quot;与传统http的区别&quot;&gt;与传统HTTP的区别&lt;/h3&gt;

&lt;p&gt;REST架构基于标准HTTP方法，包括常用的GET、POST、PUT、PATCH、DELETE、HEAD、OPTIONS等等，将每个用户需求抽象成资源，任何对资源的操作都通过HTTP协议完成，在整个URI中不能出现动词，形如：http://api.muarine.com/demo/persons/zhangsan，对比于传统的URI http://api.muarine.com/demo/persons?name=zhangsan，将用户需求和约束放在URI中&lt;/p&gt;

&lt;h3 id=&quot;域名规范&quot;&gt;域名规范&lt;/h3&gt;

&lt;p&gt;对外提供的服务做一个解释说明，一般独占二级域名api，精简URI , 形如：http://api.muarine.com/demo/persons 或者 http://www.muarine.com/api/demo/persons&lt;/p&gt;

&lt;h3 id=&quot;http-方法实际应用&quot;&gt;HTTP 方法实际应用&lt;/h3&gt;

&lt;p&gt;GET：访问某个资源单元或者集合，在URI中就做出体现，形如：http://api.muarine.com/demo/persons，http://api.muarine.com/demo/persons/zhangsan&lt;/p&gt;

&lt;p&gt;POST：添加目标资源&lt;/p&gt;

&lt;p&gt;PUT：全量覆盖更新目标资源&lt;/p&gt;

&lt;p&gt;PATCH：局部更新目标资源&lt;/p&gt;

&lt;p&gt;DELETE：删除目标资源&lt;/p&gt;

&lt;p&gt;HEAD：少见，描述目标资源的元数据信息并放置在响应的报头集合返回给客户端，一般没有主体响应内容&lt;/p&gt;

&lt;p&gt;OPTIONS：少见，发送某种“探测”请求来确定目标地址是否有效，比如针对“跨域资源”的预检（Preflight）请求&lt;/p&gt;</content><author><name>胡宗涛</name></author><summary type="html">Restful API 规约</summary></entry><entry><title type="html">SpringMVC DispatcherServlet调度过程</title><link href="http://localhost:4000/2017/03/21/DispatcherServlet%E8%B0%83%E5%BA%A6%E8%BF%87%E7%A8%8B/" rel="alternate" type="text/html" title="SpringMVC DispatcherServlet调度过程" /><published>2017-03-21T00:00:00+00:00</published><updated>2017-03-21T00:00:00+00:00</updated><id>http://localhost:4000/2017/03/21/DispatcherServlet%E8%B0%83%E5%BA%A6%E8%BF%87%E7%A8%8B</id><content type="html" xml:base="http://localhost:4000/2017/03/21/DispatcherServlet%E8%B0%83%E5%BA%A6%E8%BF%87%E7%A8%8B/">&lt;h2 id=&quot;请求响应dispatcherservlet处理流程&quot;&gt;请求响应DispatcherServlet处理流程&lt;/h2&gt;
&lt;h3 id=&quot;总结应该如何看源码&quot;&gt;总结应该如何看源码：&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-wiki&quot;&gt;1. 根据Servlet生命周期(init/service/destroy) 从顶层往下逐个深入，Servlet-HttpServletBean-FrameworkServlet-DispatcherServlet

2. 根据具体RequestMapper接口服务地址，开启debug模式，把断点放置doService方法内，跟踪代码一步步深入理解从请求到响应，DispatcherServlet的调度原理
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;大概的调用流程&quot;&gt;大概的调用流程&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;获得HandlerMapping&lt;/li&gt;
  &lt;li&gt;获得HandlerExecutionChain&lt;/li&gt;
  &lt;li&gt;获得HandleAdapter适配器&lt;/li&gt;
  &lt;li&gt;检测并注册Handler的拦截器&lt;/li&gt;
  &lt;li&gt;请求参数绑定&lt;/li&gt;
  &lt;li&gt;初始化视图容器&lt;/li&gt;
  &lt;li&gt;handle反射调用Controller method&lt;/li&gt;
  &lt;li&gt;装载ModelAndView&lt;/li&gt;
  &lt;li&gt;适配ModelAndView
```java
// 开始调度
protected DispatcherServlet.doDispatch(HttpServletRequest request, HttpServletResponse response)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;// 遍历已初始化的 请求处理器集合(List&lt;HandlerMapping&gt; handlerMappings） 得到一个Handler执行器
// RequestMappingHandleMapping  SimpleUrlHandleMapping  BeanNameUrlHandleMapping
// 加载context.getBean()获取 HandlerExecutionChain
protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception&lt;/HandlerMapping&gt;&lt;/p&gt;

&lt;p&gt;// 到这就已经确定该调用哪个Controller.method以及return类型
// HandlerExecutionChain mappedHandler执行链，获取HandleAdapter适配器
HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());&lt;/p&gt;

&lt;p&gt;// Apply preHandle methods of registered interceptors. 检测并注册Handler的拦截器
boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response)&lt;/p&gt;

&lt;p&gt;// 开始调用Controller.method
ModelAndView mv = ha.handle(processedRequest, response, mappedHandler.getHandler());
// 下面是真正开始调用handler的过程
  /**
	 * Invoke the {@link RequestMapping} handler method preparing a {@link ModelAndView}
	 * if view resolution is required.
	 * @since 4.2
	 * @see #createInvocableHandlerMethod(HandlerMethod)
	 */
	protected ModelAndView invokeHandlerMethod(HttpServletRequest request,
			HttpServletResponse response, HandlerMethod handlerMethod) throws Exception {&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	ServletWebRequest webRequest = new ServletWebRequest(request, response);
	try {
  // 请求参数绑定
		WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);
		ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);
  // 初始化 反射调用handler
		ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);
		invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);
		invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);
		invocableMethod.setDataBinderFactory(binderFactory);
		invocableMethod.setParameterNameDiscoverer(this.parameterNameDiscoverer);
  // 初始化 视图容器
		ModelAndViewContainer mavContainer = new ModelAndViewContainer();
		mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));
		modelFactory.initModel(webRequest, mavContainer, invocableMethod);
		mavContainer.setIgnoreDefaultModelOnRedirect(this.ignoreDefaultModelOnRedirect);

		AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);
		asyncWebRequest.setTimeout(this.asyncRequestTimeout);

		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);
		asyncManager.setTaskExecutor(this.taskExecutor);
		asyncManager.setAsyncWebRequest(asyncWebRequest);
		asyncManager.registerCallableInterceptors(this.callableInterceptors);
		asyncManager.registerDeferredResultInterceptors(this.deferredResultInterceptors);

		if (asyncManager.hasConcurrentResult()) {
			Object result = asyncManager.getConcurrentResult();
			mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[0];
			asyncManager.clearConcurrentResult();
			if (logger.isDebugEnabled()) {
				logger.debug(&quot;Found concurrent result value [&quot; + result + &quot;]&quot;);
			}
			invocableMethod = invocableMethod.wrapConcurrentResult(result);
		}
  // 反射invoke执行Controller里的method，并把结果装载进mavContainer
		invocableMethod.invokeAndHandle(webRequest, mavContainer);
		if (asyncManager.isConcurrentHandlingStarted()) {
			return null;
		}
  // 匹配合适的ModelAndView
		return getModelAndView(mavContainer, modelFactory, webRequest);
	}
	finally {
		webRequest.requestCompleted();
	}
} // 匹配ModelAndView视图 private ModelAndView getModelAndView(ModelAndViewContainer mavContainer,
		ModelFactory modelFactory, NativeWebRequest webRequest) throws Exception {

	modelFactory.updateModel(webRequest, mavContainer);
// 对于Restful API 直接return null
	if (mavContainer.isRequestHandled()) {
		return null;
	}
	ModelMap model = mavContainer.getModel();
	ModelAndView mav = new ModelAndView(mavContainer.getViewName(), model, mavContainer.getStatus());
	if (!mavContainer.isViewReference()) {
		mav.setView((View) mavContainer.getView());
	}
	if (model instanceof RedirectAttributes) {
		Map&amp;lt;String, ?&amp;gt; flashAttributes = ((RedirectAttributes) model).getFlashAttributes();
		HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);
		RequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);
	}
	return mav;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;//
//
```&lt;/p&gt;</content><author><name>胡宗涛</name></author><summary type="html">请求响应DispatcherServlet处理流程 总结应该如何看源码： ```wiki 根据Servlet生命周期(init/service/destroy) 从顶层往下逐个深入，Servlet-HttpServletBean-FrameworkServlet-DispatcherServlet</summary></entry><entry><title type="html">Println Fprintf Printf 占位符</title><link href="http://localhost:4000/2017/03/20/print/" rel="alternate" type="text/html" title="Println Fprintf Printf 占位符" /><published>2017-03-20T00:00:00+00:00</published><updated>2017-03-20T00:00:00+00:00</updated><id>http://localhost:4000/2017/03/20/print</id><content type="html" xml:base="http://localhost:4000/2017/03/20/print/">&lt;h2 id=&quot;println-fprintf-printf-占位符&quot;&gt;Println Fprintf Printf 占位符&lt;/h2&gt;

&lt;p&gt;fmt.Println 打印值&lt;/p&gt;

&lt;p&gt;fmt.Fprintf 指定输出对象&lt;/p&gt;

&lt;p&gt;fmt.Printf(format string) 输出字符串&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;占位符&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;%v&lt;/td&gt;
      &lt;td&gt;结构体字段值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%+v&lt;/td&gt;
      &lt;td&gt;结构体字段和字段值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%#v&lt;/td&gt;
      &lt;td&gt;结构体运行的源代码片段&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%T&lt;/td&gt;
      &lt;td&gt;打印值的类型&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%t&lt;/td&gt;
      &lt;td&gt;格式化布尔值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%d&lt;/td&gt;
      &lt;td&gt;十进制格式化&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%b&lt;/td&gt;
      &lt;td&gt;binary 二进制格式化&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%o&lt;/td&gt;
      &lt;td&gt;八进制格式化&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%x&lt;/td&gt;
      &lt;td&gt;十六进制格式化，字母形式为小写 a-f&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%X&lt;/td&gt;
      &lt;td&gt;十六进制格式化，字母形式为小写 A-F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%U&lt;/td&gt;
      &lt;td&gt;Unicode格式：U+1234，等同于 “U+%04X”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%c&lt;/td&gt;
      &lt;td&gt;整数对应的ascii码值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%x&lt;/td&gt;
      &lt;td&gt;Hexadecimal 输出十六进制值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%f&lt;/td&gt;
      &lt;td&gt;浮点型格式化，如有%5.2f 表示占5个字符位右对齐并保留两位小数， %-5.2f 同上但是左对齐&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%e&lt;/td&gt;
      &lt;td&gt;科学计数法&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%E&lt;/td&gt;
      &lt;td&gt;科学计数法&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%s&lt;/td&gt;
      &lt;td&gt;输出字符串, %6s 表示占六个字符并右对齐，%-6s同上但是左对齐&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%p&lt;/td&gt;
      &lt;td&gt;输出指针内存地址值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%q&lt;/td&gt;
      &lt;td&gt;输出指针内存地址值&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;普通占位符&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;占位符&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
      &lt;th&gt;举例&lt;/th&gt;
      &lt;th&gt;输出&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;%v&lt;/td&gt;
      &lt;td&gt;相应值的默认格式。只输出字段值&lt;/td&gt;
      &lt;td&gt;Printf(“%v”, people)&lt;/td&gt;
      &lt;td&gt;{zhangsan}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%+v&lt;/td&gt;
      &lt;td&gt;打印结构体时，会添加字段名&lt;/td&gt;
      &lt;td&gt;Printf(“%+v”, people)&lt;/td&gt;
      &lt;td&gt;{Name:zhangsan}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%#v&lt;/td&gt;
      &lt;td&gt;相应值的Go语法表示，打印包和类型、结构体&lt;/td&gt;
      &lt;td&gt;Printf(“#v”, people)&lt;/td&gt;
      &lt;td&gt;main.Human{Name:”zhangsan”}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%T&lt;/td&gt;
      &lt;td&gt;相应值的类型的Go语法表示，类型&lt;/td&gt;
      &lt;td&gt;Printf(“%T”, people)&lt;/td&gt;
      &lt;td&gt;main.Human&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%%&lt;/td&gt;
      &lt;td&gt;字面上的百分号，并非值的占位符&lt;/td&gt;
      &lt;td&gt;Printf(“%%”)&lt;/td&gt;
      &lt;td&gt;%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;布尔占位符&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;占位符&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
      &lt;th&gt;举例&lt;/th&gt;
      &lt;th&gt;输出&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;%t&lt;/td&gt;
      &lt;td&gt;true/false&lt;/td&gt;
      &lt;td&gt;Printf(“%b”, true)&lt;/td&gt;
      &lt;td&gt;true&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;整数占位符&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;占位符&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
      &lt;th&gt;举例&lt;/th&gt;
      &lt;th&gt;输出&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;%b&lt;/td&gt;
      &lt;td&gt;二进制表示&lt;/td&gt;
      &lt;td&gt;Printf(“%b”, 5)&lt;/td&gt;
      &lt;td&gt;101&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%c&lt;/td&gt;
      &lt;td&gt;相应Unicode码点所表示的字符&lt;/td&gt;
      &lt;td&gt;Printf(“%c”, 0x4E2D)&lt;/td&gt;
      &lt;td&gt;中&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%d&lt;/td&gt;
      &lt;td&gt;十进制表示&lt;/td&gt;
      &lt;td&gt;Printf(“%d”, 0x12)&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%o&lt;/td&gt;
      &lt;td&gt;八进制表示&lt;/td&gt;
      &lt;td&gt;Printf(“%d”, 10)&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%q&lt;/td&gt;
      &lt;td&gt;单引号围绕的字符字面值，由Go语法安全地转义&lt;/td&gt;
      &lt;td&gt;Printf(“%q”, 0x4E2D)&lt;/td&gt;
      &lt;td&gt;‘中’&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%x&lt;/td&gt;
      &lt;td&gt;十六进制表示，字母形式为小写 a-f&lt;/td&gt;
      &lt;td&gt;Printf(“%x”, 13)&lt;/td&gt;
      &lt;td&gt;d&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%X&lt;/td&gt;
      &lt;td&gt;十六进制表示，字母形式为大写 A-F&lt;/td&gt;
      &lt;td&gt;Printf(“%x”, 13)&lt;/td&gt;
      &lt;td&gt;D&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%U&lt;/td&gt;
      &lt;td&gt;Unicode格式：U+1234，等同于 “U+%04X”&lt;/td&gt;
      &lt;td&gt;Printf(“%U”, 0x4E2D)&lt;/td&gt;
      &lt;td&gt;U+4E2D&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;浮点数和复数的组成部分（实部和虚部）
| 占位符  | 说明                                       | 举例                                       | 输出           |
| —- | —————————————- | —————————————- | ———— |
| %b   | 无小数部分的，指数为二的幂的科学计数法，与 strconv.FormatFloat 的 ‘b’ 转换格式一致。例如 -123456p-78 |                                          |              |
| %e   | 科学计数法，例如 -1234.456e+78                   | Printf(“%e”, 10.2)                       | 1.020000e+01 |
| %E   | 科学计数法，例如 -1234.456E+78                   | Printf(“%e”, 10.2)                       | 1.020000E+01 |
| %f   | 有小数点而无指数，例如 123.456                      | Printf(“%f”, 10.2)                       | 10.200000    |
| %g   | 根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出          | Printf(“%g”, 10.20)                      | 10.2         |
| %G   | 根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出          | Printf(“%G”, 10.20+2i)                   | (10.2+2i)    |
| %q   | 双引号围绕的字符串，由Go语法安全地转义                     | Printf(“%q”, “Go语言”)                     | “Go语言”       |
| %x   | 十六进制，小写字母，每字节两个字符                        | Printf(“%x”, “golang”)                   | 676f6c616e67 |
| %X   | 十六进制，大写字母，每字节两个字符                        | Printf(“%X”, “golang”)         676F6C616E67) | (10.2+2i)    |&lt;/p&gt;

&lt;p&gt;字符串与字节切片
浮点数和复数的组成部分（实部和虚部）&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;占位符&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
      &lt;th&gt;举例&lt;/th&gt;
      &lt;th&gt;输出&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;%s&lt;/td&gt;
      &lt;td&gt;输出字符串表示（string类型或[]byte)&lt;/td&gt;
      &lt;td&gt;Printf(“%s”, []byte(“Go语言”))&lt;/td&gt;
      &lt;td&gt;Go语言&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%q&lt;/td&gt;
      &lt;td&gt;双引号围绕的字符串，由Go语法安全地转义&lt;/td&gt;
      &lt;td&gt;Printf(“%q”, “Go语言”)&lt;/td&gt;
      &lt;td&gt;“Go语言”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%x&lt;/td&gt;
      &lt;td&gt;十六进制，小写字母，每字节两个字符&lt;/td&gt;
      &lt;td&gt;Printf(“%x”, “golang”)&lt;/td&gt;
      &lt;td&gt;676f6c616e67&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%X&lt;/td&gt;
      &lt;td&gt;十六进制，大写字母，每字节两个字符&lt;/td&gt;
      &lt;td&gt;Printf(“%X”, “golang”)&lt;/td&gt;
      &lt;td&gt;676F6C616E67&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;指针&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;占位符&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
      &lt;th&gt;举例&lt;/th&gt;
      &lt;th&gt;输出&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;%p&lt;/td&gt;
      &lt;td&gt;十六进制表示，前缀 0x&lt;/td&gt;
      &lt;td&gt;Printf(“%p”, &amp;amp;people)&lt;/td&gt;
      &lt;td&gt;0x4f57f0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其它标记&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;占位符&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
      &lt;th&gt;举例&lt;/th&gt;
      &lt;th&gt;输出&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;+&lt;/td&gt;
      &lt;td&gt;总打印数值的正负号；对于%q（%+q）保证只输出ASCII编码的字符&lt;/td&gt;
      &lt;td&gt;Printf(“%+q”, “中文”)&lt;/td&gt;
      &lt;td&gt;“\u4e2d\u6587”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;在右侧而非左侧填充空格（左对齐该区域）&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;#&lt;/td&gt;
      &lt;td&gt;备用格式：为八进制添加前导 0（%#o） 为十六进制添加前导 0x（%#x）或 0X（%#X），为 %p（%#p）去掉前导 0x；&lt;/td&gt;
      &lt;td&gt;Printf(“%#U”, ‘中’)&lt;/td&gt;
      &lt;td&gt;U+4E2D&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;’ ‘&lt;/td&gt;
      &lt;td&gt;(空格)为数值中省略的正负号留出空白（% d）；以十六进制（% x, % X）打印字符串或切片时，在字节之间用空格隔开&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;填充前导的0而非空格；对于数字，这会将填充移到正负号之后&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//Go 为常规 Go 值的格式化设计提供了多种打印方式。例如，这里打印了 point 结构体的一个实例。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// %v 只输出结构体中的字段值&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%v&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// {1 2}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//如果值是一个结构体，%+v 的格式化输出内容将包括结构体的字段名。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%+v&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// {x:1 y:2}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//%#v 形式则输出这个值的 Go 语法表示。例如，值的运行源代码片段。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%#v&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// main.point{x:1, y:2}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//需要打印值的类型，使用 %T。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%T&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// main.point&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//格式化布尔值是简单的。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%t&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// true&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//格式化整形数有多种方式，使用 %d进行标准的十进制格式化。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 123&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//这个输出二进制表示形式。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%b&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//Binary 1110&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//这个输出给定十进制数的对应字符。 超出打印空，不会报错&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// !&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// %x 提供十六进制编码。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//Hexadecimal 1c8&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//对于浮点型同样有很多的格式化选项。使用 %f 进行最基本的十进制格式化。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;78.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 78.900000&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//%e 和 %E 将浮点型格式化为（稍微有一点不同的）科学技科学记数法表示形式。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%e&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123400000.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 1.234000e+08&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%E&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123400000.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 1.234000E+08&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//使用 %s 进行基本的字符串输出。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;string&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//像 Go 源代码中那样带有双引号的输出，使用 %q。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%q&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;\&quot;string\&quot;&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//和上面的整形数一样，%x 输出使用 base-16 编码的字符串，每个字节使用 2 个字符表示。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hex this&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 6865782074686973&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//要输出一个指针的值，使用 %p。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 0x1040a128&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//当输出数字的时候，你将经常想要控制输出结果的宽度和精度，可以使用在 % 后面使用数字来控制输出宽度。默认结果使用右对齐并且通过空格来填充空白部分。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;|%6d|%6d|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;345&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// |    12|   345|&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//你也可以指定浮点型的输出宽度，同时也可以通过 宽度.精度 的语法来指定输出的精度。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;|%6.2f|%6.2f|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3.45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// |  1.20|  3.45|&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//要最对齐，使用 - 标志。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;|%-6.2f|%-6.2f|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3.45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// |1.20  |3.45  |&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//你也许也想控制字符串输出时的宽度，特别是要确保他们在类表格输出时的对齐。这是基本的右对齐宽度表示。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;|%6s|%6s|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// |   foo|     b|&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//要左对齐，和数字一样，使用 - 标志。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;|%-6s|%-6s|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// |foo   |b     |&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//到目前为止，我们已经看过 Printf了，它通过 os.Stdout输出格式化的字符串。Sprintf 则格式化并返回一个字符串而不带任何输出。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// a string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//你可以使用 Fprintf 来格式化并输出到 io.Writers而不是 os.Stdout。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;an %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//an error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>胡宗涛</name></author><summary type="html">Println Fprintf Printf 占位符</summary></entry><entry><title type="html">golang学习-01</title><link href="http://localhost:4000/2017/03/19/%E5%AE%89%E8%A3%85/" rel="alternate" type="text/html" title="golang学习-01" /><published>2017-03-19T00:00:00+00:00</published><updated>2017-03-19T00:00:00+00:00</updated><id>http://localhost:4000/2017/03/19/%E5%AE%89%E8%A3%85</id><content type="html" xml:base="http://localhost:4000/2017/03/19/%E5%AE%89%E8%A3%85/">&lt;p&gt;##go客户端安装##
https://golang.org/doc/install&lt;/p&gt;

&lt;p&gt;###go环境变量###&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/Muarine/go
&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;构建go开发目录&quot;&gt;构建go开发目录&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/github.com/src/hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;选择ide&quot;&gt;选择IDE&lt;/h3&gt;

&lt;p&gt;我选择的是Web Storm，对于市面上流行的开发工具体验比较了一下&lt;/p&gt;

&lt;p&gt;Web Storm	因习惯于IDEA，所以上手非常快，安装golang插件后，可以直接debug&lt;/p&gt;

&lt;p&gt;国产LiteIDE 不用Eclipse标识对界面无爱，果断放弃，而且使用习惯难以接受&lt;/p&gt;

&lt;p&gt;Atom go-plus plugins 介于使用频率较高，就顺带体验了一下，import 外部package、Test提示、联想输入、语法提示什么的很顺手&lt;/p&gt;

&lt;p&gt;Sublime Text 还没体验过。。。&lt;/p&gt;

&lt;h3 id=&quot;开始学习&quot;&gt;开始学习&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go get golang.org/x/tour/gotour
vim &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/github.com/src/hello/hello.go
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// 声明包名 主程序执行入口包名一般为main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 程序执行入口&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello world &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go build &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/github.com/src/hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>胡宗涛</name></author><summary type="html">##go客户端安装## https://golang.org/doc/install</summary></entry></feed>